// Copyright 2014 The go-gl/mathgl Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// +build ignore

// codegen generates go code from templates. Intended to be
// used with go generate; see the invocation in util.go.

package main

import (
	"bytes"
	"flag"
	"fmt"
	"os"
	"os/exec"
	"path/filepath"
	"strings"
	"text/template"
)

type Context struct {
	Comment      string
	TemplateName string
}

type MatrixIter struct {
	M     int // row
	N     int // column
	index int
}

func main() {
	var tplPath = flag.String("template", "vector.tpl", "template path")
	var oPath = flag.String("output", "vector.go", "output path")

	flag.Parse()
	if flag.NArg() > 0 {
		fmt.Println("usage: codegen -template path -output path")
		os.Exit(1)
	}

	tpl := template.New("").Delims("<<", ">>").Funcs(template.FuncMap{
		"typename":    typenameHelper,
		"elementname": elementNameHelper,
		"iter":        iterHelper,
		"matiter":     matrixIterHelper,
		"enum":        enumHelper,
		"sep":         separatorHelper,
		"repeat":      repeatHelper,
		"add":         addHelper,
		"mul":         mulHelper,
	})
	tpl = template.Must(tpl.ParseFiles(*tplPath))
	tplName := filepath.Base(*tplPath)

	oFile, err := os.Create(*oPath)
	if err != nil {
		panic(err)
	}

	context := Context{
		Comment:      "This file is generated by codegen.go; DO NOT EDIT",
		TemplateName: tplName,
	}
	err = tpl.ExecuteTemplate(oFile, tplName, context)
	if err != nil {
		panic(err)
	}

	oFile.Close()

	fmtOutput, err := exec.Command("go", "fmt", *oPath).CombinedOutput()
	if err != nil {
		os.Stdout.Write(fmtOutput)
		panic(err)
	}
}

func typenameHelper(m, n int) string {
	if m == 1 {
		return fmt.Sprintf("Vec%d", n)
	}
	if n == 1 {
		return fmt.Sprintf("Vec%d", m)
	}
	if m == n {
		return fmt.Sprintf("Mat%d", m)
	}
	return fmt.Sprintf("Mat%dx%d", m, n)
}

func elementNameHelper(m int) string {
	switch m {
	case 0:
		return "X"
	case 1:
		return "Y"
	case 2:
		return "Z"
	case 3:
		return "W"
	default:
		panic("Can't generate element name")
	}
}

func iterHelper(start, end int) []int {
	iter := make([]int, end-start)
	for i := start; i < end; i++ {
		iter[i] = i
	}
	return iter
}

func matrixIterHelper(rows, cols int) []MatrixIter {
	res := make([]MatrixIter, 0, rows*cols)

	for n := 0; n < cols; n++ {
		for m := 0; m < rows; m++ {
			res = append(res, MatrixIter{
				M:     m,
				N:     n,
				index: n*rows + m,
			})
		}
	}

	return res
}

// Template function that returns slice from its arguments. Indended to be used
// in range loops.
func enumHelper(args ...int) []int {
	return args
}

// Template function to insert commas and '+' in range loops.
func separatorHelper(sep string, iterCond int) string {
	if iterCond > 0 {
		return sep
	}
	return ""
}

// Template function to repeat string 'count' times. Inserting 'sep' between
// repetitions. Also changes all occurrences of '%d' to repetition number.
// For example, repeatHelper(3, "col%d", ",") will output "col0, col1, col2"
func repeatHelper(count int, text string, sep string) string {
	var res bytes.Buffer

	for i := 0; i < count; i++ {
		if i > 0 {
			res.WriteString(sep)
		}
		res.WriteString(strings.Replace(text, "%d", fmt.Sprintf("%d", i), -1))
	}

	return res.String()
}

func addHelper(args ...int) int {
	res := 0
	for _, a := range args {
		res += a
	}
	return res
}

func mulHelper(args ...int) int {
	res := 1
	for _, a := range args {
		res *= a
	}
	return res
}

func (i MatrixIter) String() string {
	return fmt.Sprintf("%d", i.index)
}
